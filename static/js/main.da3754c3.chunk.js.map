{"version":3,"sources":["components/Square.js","components/Board.js","helpers.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","backgroundColor","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","calculateWinner","lines","length","a","b","c","console","log","styles","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","timeInHistory","slice","current","_step","move","destination","step","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da3754c3.chunk.js","sourcesContent":["import React from 'react'\n\nconst style = {\n    background: 'red',\n    border: '2px solid black',\n    fontSize: '50px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n\n}\n\n\nconst Square = ({value, onClick}) => (\n   <button style={style} onClick={onClick}>\n       {value}\n   </button>\n);\n\nexport default Square;","import React from 'react'\nimport Square from './Square'\n\nconst style = {\n    backgroundColor: 'red',\n    border: '4px solid black',\n    borderRadius: '10px',\n    width: '350px',\n    height: '350px',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n};\n\nconst Board = ({squares, onClick}) => (\n<div style={style}>\n    {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)}/>\n    ))}\n</div>\n\n)\n\nexport default Board;","export function calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nconst squares = [\n    null, null, null,\n    'X', 'X', 'O',\n    null, null, null\n];\n\nconsole.log(calculateWinner(squares));","import React, {useState} from 'react';\nimport Board from './Board';\nimport {calculateWinner} from '../helpers';\n\nconst styles = {\n    width: '200px',\n    margin: '20px auto',\n}\n\nconst Game = () => {\n    const [history, setHistory] = useState([Array(9).fill(null)])\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setXisNext] = useState(true)\n    const winner = calculateWinner(history[stepNumber])\n\n\n    const handleClick = i => {\n        const timeInHistory = history.slice(0, stepNumber + 1);\n        const current = timeInHistory[stepNumber];\n        const squares = [...current];\n\n        if(winner || squares[i]) return;\n\n        squares[i] = xIsNext ? 'X' : 'O';\n        setHistory([...timeInHistory, squares]);\n        setStepNumber(timeInHistory.length);\n    \n        setXisNext(!xIsNext);\n\n    }\n    \n    const jumpTo = step => {\n        setStepNumber(step);\n        setXisNext(step % 2 === 0)\n\n    };\n\n    const renderMoves = () => (\n        history.map((_step, move) => {\n            const destination = move ? `Previous Move#${move}` : 'Start at Beginning';\n            return(\n                <li key={move}>\n                <button onClick={() => jumpTo(move)}>{destination} </button>\n                </li>\n\n            )\n        })\n\n    )\n    return (\n        <>\n        <Board squares={history[stepNumber]} onClick={handleClick}/>\n        <div style={styles}>\n        <p>{winner ? 'Winner: ' + winner : 'Next Player ' + (xIsNext ? 'X' : 'O')}</p>\n        {renderMoves()}\n\n        </div>\n       </>\n       \n    )\n}\n\nexport default Game;","import React from 'react';\nimport Game from './components/Game'\nimport './App.css';\n\nfunction App() { \n  return (\n    <div className=\"App\">\n      <h1>Tic Tac Toe</h1>\n      <h1><Game/></h1>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}